// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// --- Application Models ---

// Stores metadata for each analyzed wallet, crucial for incremental fetching.
model Wallet {
  address                   String    @id @unique // Solana wallet address
  // Oldest transaction timestamp ever processed for this wallet
  firstProcessedTimestamp   Int?
  // Signature of the absolute newest transaction processed for this wallet
  newestProcessedSignature  String?
  // Timestamp of the absolute newest transaction processed for this wallet
  newestProcessedTimestamp  Int?
  // Timestamp of the last time a fetch was successfully run for this wallet
  lastSuccessfulFetchTimestamp DateTime?
  // Signature of the newest transaction that was successfully included in the last analysis run
  lastSignatureAnalyzed    String? 
}

// Stores raw Helius transaction details.
model HeliusTransactionCache {
  signature   String   @id @unique
  timestamp   Int      
  rawData     Bytes     
  fetchedAt   DateTime @default(now())

  @@index([timestamp])

}

// Stores PRE-CALCULATED data for a specific user swap leg, derived from Helius events.
// One record per SPL token sent or received by the user in a swap.
model SwapAnalysisInput {
  id                 Int       @id @default(autoincrement())
  walletAddress      String
  signature          String
  timestamp          Int // Unix timestamp (seconds)
  mint               String // SPL token mint address
  amount             Float // Amount of the SPL token
  direction          String // 'in' or 'out'
  associatedSolValue Float // Associated SOL/WSOL value for the transaction
  associatedUsdcValue Float? // Associated USDC value for the transaction (optional)
  interactionType    String // Original Helius transaction type (e.g., SWAP, TRANSFER)
  feeAmount          Float? // Fee amount in SOL
  feePercentage      Float? // Fee percentage relative to transaction size

  @@unique([signature, mint, direction, amount], name: "signature_mint_direction_amount")
  @@index([walletAddress, timestamp])
  @@index([signature])
  @@index([mint])
}

// Tracks metadata for each analysis execution.
model AnalysisRun {
  id                   Int       @id @default(autoincrement())
  walletAddress        String
  runTimestamp         DateTime  @default(now())
  status               String    // e.g., 'completed', 'failed', 'in_progress'
  // Time range covered by this specific analysis run
  analysisStartTs      Int?      
  analysisEndTs        Int?
  signaturesProcessed  Int?      
  errorMessage         String?   

  advancedStats        AdvancedStatsResult?

  @@index([walletAddress, runTimestamp])
}

// Stores calculated per-token results for an AnalysisRun.
// This model is being refactored to store THE authoritative, latest analyzed state per token.
model AnalysisResult {
  id                     Int      @id @default(autoincrement())
  walletAddress          String   // KEPT: For easier querying
  tokenAddress           String
  totalAmountIn          Float    // REVERTED: Back to Float
  totalAmountOut         Float    // REVERTED: Back to Float
  netAmountChange        Float    // REVERTED: Back to Float
  totalSolSpent          Float    // REVERTED: Back to Float. This will represent GROSS SOL spent.
  totalSolReceived       Float    // REVERTED: Back to Float. This will represent GROSS SOL received.
  totalFeesPaidInSol     Float?   // NEW: Sum of explicit SOL fees from SwapAnalysisInput
  netSolProfitLoss       Float    // REVERTED: Back to Float. Will be calculated as GrossReceived - GrossSpent - Fees.
  transferCountIn        Int
  transferCountOut       Int
  firstTransferTimestamp Int?
  lastTransferTimestamp  Int?

  @@index([walletAddress]) // KEPT index (already exists)
  @@index([tokenAddress]) // ADDED index for tokenAddress
  @@unique([walletAddress, tokenAddress]) // ADDED unique constraint
}

// Stores calculated advanced metrics for an AnalysisRun.
model AdvancedStatsResult {
  id                           Int     @id @default(autoincrement())
  runId                        Int     @unique 
  walletAddress                String  // KEPT: For easier querying
  medianPnlPerToken            Float   // REVERTED: Back to Float
  trimmedMeanPnlPerToken       Float   // REVERTED: Back to Float
  tokenWinRatePercent          Float   // REVERTED: Back to Float
  standardDeviationPnl         Float   // REVERTED: Back to Float
  profitConsistencyIndex       Float   // REVERTED: Back to Float
  weightedEfficiencyScore      Float   // REVERTED: Back to Float
  averagePnlPerDayActiveApprox Float   // REVERTED: Back to Float

  run                          AnalysisRun @relation(fields: [runId], references: [id], onDelete: Cascade)

  @@index([walletAddress]) // KEPT index
}

model User {
  id           String    @id @default(cuid()) // Or use autoincrement Int
  apiKey       String    @unique // For API authentication
  description  String?   // e.g., "Dashboard Primary Access", "Analyst X"
  createdAt    DateTime  @default(now())
  lastSeenAt   DateTime?
  isActive     Boolean   @default(true)
  activityLogs ActivityLog[]
  // Optional: Link to user-specific settings or saved wallet lists
}

model ActivityLog {
  id                 String    @id @default(cuid()) // Or use autoincrement Int
  userId             String
  user               User      @relation(fields: [userId], references: [id])
  actionType         String    // e.g., 'get_wallet_summary', 'get_token_performance', 'run_pnl_analysis'
  timestamp          DateTime  @default(now())
  requestParameters  String?     // Input parameters for the action (stored as JSON string)
  status             String    // 'SUCCESS', 'FAILURE', 'INITIATED'
  durationMs         Int?      // Duration of the action
  errorMessage       String?
  sourceIp           String?   // Optional: for additional context

  @@index([userId])
  @@index([actionType])
  @@index([timestamp])
}
