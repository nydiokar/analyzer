// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// --- Application Models ---

// Stores metadata for each analyzed wallet, crucial for incremental fetching.
model Wallet {
  address                      String    @id @unique // Solana wallet address
  // Oldest transaction timestamp ever processed for this wallet
  firstProcessedTimestamp      Int?
  // Signature of the absolute newest transaction processed for this wallet
  newestProcessedSignature     String?
  // Timestamp of the absolute newest transaction processed for this wallet
  newestProcessedTimestamp     Int?
  // Timestamp of the last time a fetch was successfully run for this wallet
  lastSuccessfulFetchTimestamp DateTime?
  // Timestamp of the OLDEST transaction included in the last successful analysis
  analyzedTimestampStart       Int?
  // Timestamp of the NEWEST transaction included in the last successful analysis
  analyzedTimestampEnd         Int?

  // Wallet classification for bot detection
  classification           String?   @default("unknown") // "bot", "human", "unknown", "institutional"
  classificationConfidence Float? // 0.0-1.0 confidence score
  classificationUpdatedAt  DateTime? // When classification was last updated
  classificationMethod     String? // "behavioral", "pattern", "manual", "api"
  isVerifiedBot            Boolean   @default(false) // Manual verification flag

  // Bot-specific metadata
  botType        String? // "arbitrage", "mev", "market_maker", "liquidity", "spam"
  botPatternTags Json? // Array of detected patterns: ["high_frequency", "micro_transactions", "true_flipper"]

  // Relations to the latest summaries and profiles - fixed to be referenced by children
  pnlSummary      WalletPnlSummary?
  behaviorProfile WalletBehaviorProfile?
  // analysisRuns              AnalysisRun[] // If you want to navigate from Wallet to its runs
  activityLogs    ActivityLog[]          @relation("WalletActivityLogs") // Named relation
  // Optional: Link to user-specific settings or saved wallet lists
  walletNotes     WalletNote[]
  favoritedBy     UserFavoriteWallet[] // Added for Wallet-FavoriteWallets relationship
  AnalysisResult  AnalysisResult[]

  @@index([classification])
  @@index([classificationConfidence])
  @@index([isVerifiedBot])
}

// Stores lightweight cache of processed transaction signatures.
// Used to avoid re-fetching already processed transactions from Helius API.
model HeliusTransactionCache {
  signature String   @id @unique
  timestamp Int
  fetchedAt DateTime @default(now())

  @@index([timestamp])
}

// Stores PRE-CALCULATED data for a specific user swap leg, derived from Helius events.
// One record per SPL token sent or received by the user in a swap.
model SwapAnalysisInput {
  id                  Int    @id @default(autoincrement())
  walletAddress       String
  signature           String
  timestamp           Int // Unix timestamp (seconds)
  mint                String // SPL token mint address
  amount              Float // Amount of the SPL token
  direction           String // 'in' or 'out'
  associatedSolValue  Float // Associated SOL/WSOL value for the transaction
  associatedUsdcValue Float? // Associated USDC value for the transaction (optional)
  interactionType     String // Original Helius transaction type (e.g., SWAP, TRANSFER)
  feeAmount           Float? // Fee amount in SOL
  feePercentage       Float? // Fee percentage relative to transaction size

  @@unique([signature, mint, direction, amount], name: "signature_mint_direction_amount")
  @@index([walletAddress, timestamp])
  @@index([signature])
  @@index([mint])
}

// Stores per-token PNL & stats - LATEST ALL-TIME
model AnalysisResult {
  id            Int    @id @default(autoincrement())
  walletAddress String
  tokenAddress  String

  totalAmountIn          Float
  totalAmountOut         Float
  netAmountChange        Float
  totalSolSpent          Float
  totalSolReceived       Float
  totalFeesPaidInSol     Float?
  netSolProfitLoss       Float
  transferCountIn        Int
  transferCountOut       Int
  firstTransferTimestamp Int?
  lastTransferTimestamp  Int?

  isValuePreservation     Boolean?
  estimatedPreservedValue Float?
  preservationType        String? // Consider Enum: enum PreservationType { STABLECOIN HODL }

  // New fields for current token balance snapshot
  currentRawBalance      String? // Current raw token balance (string to preserve precision)
  currentUiBalance       Float? // Or Decimal?
  currentUiBalanceString String?
  balanceDecimals        Int? // Decimals for the current balance fields
  balanceFetchedAt       DateTime? // Timestamp when this specific token balance was part of a WalletState fetch

  updatedAt DateTime @default(now()) @updatedAt

  wallet Wallet @relation(fields: [walletAddress], references: [address], onDelete: Cascade)

  @@unique([walletAddress, tokenAddress])
  @@index([walletAddress])
  @@index([tokenAddress])
  @@index([lastTransferTimestamp])
  @@index([netSolProfitLoss])
}

// Stores aggregated PNL metrics for a wallet - LATEST ALL-TIME
model WalletPnlSummary {
  id            Int    @id @default(autoincrement())
  walletAddress String @unique
  wallet        Wallet @relation(fields: [walletAddress], references: [address])

  totalVolume                       Float
  totalFees                         Float
  realizedPnl                       Float
  unrealizedPnl                     Float
  netPnl                            Float
  stablecoinNetFlow                 Float
  averageSwapSize                   Float
  profitableTokensCount             Int
  unprofitableTokensCount           Int
  totalExecutedSwapsCount           Int
  averageRealizedPnlPerExecutedSwap Float
  realizedPnlToTotalVolumeRatio     Float
  totalSignaturesProcessed          Int

  overallFirstTimestamp Int?
  overallLastTimestamp  Int?

  advancedStats AdvancedTradeStats? // One-to-one relation via walletPnlSummaryId field on AdvancedTradeStats

  // New fields for SOL balance snapshot
  currentSolBalance   Float? // Current SOL balance at the time of analysis
  solBalanceFetchedAt DateTime? // Timestamp when SOL balance was fetched (should be same as token balances)

  updatedAt DateTime @updatedAt

  @@index([walletAddress])
}

// Stores advanced trade statistics for a wallet - LATEST ALL-TIME
model AdvancedTradeStats {
  id                 Int              @id @default(autoincrement())
  walletPnlSummaryId Int              @unique
  walletPnlSummary   WalletPnlSummary @relation(fields: [walletPnlSummaryId], references: [id], onDelete: Cascade)

  medianPnlPerToken            Float
  trimmedMeanPnlPerToken       Float
  tokenWinRatePercent          Float
  standardDeviationPnl         Float
  profitConsistencyIndex       Float
  weightedEfficiencyScore      Float
  averagePnlPerDayActiveApprox Float
  firstTransactionTimestamp    Int?
  lastTransactionTimestamp     Int?

  updatedAt DateTime @updatedAt
}

// Stores behavioral profile for a wallet - LATEST ALL-TIME
model WalletBehaviorProfile {
  id            Int    @id @default(autoincrement())
  walletAddress String @unique
  wallet        Wallet @relation(fields: [walletAddress], references: [address])

  buySellRatio             Float
  buySellSymmetry          Float
  averageFlipDurationHours Float
  medianHoldTime           Float
  sequenceConsistency      Float
  flipperScore             Float
  uniqueTokensTraded       Int
  tokensWithBothBuyAndSell Int
  totalTradeCount          Int
  totalBuyCount            Int
  totalSellCount           Int
  completePairsCount       Int
  averageTradesPerToken    Float

  tradingTimeDistribution  Json // BehavioralMetrics.tradingTimeDistribution
  percentTradesUnder1Hour  Float
  percentTradesUnder4Hours Float

  tradingStyle    String
  confidenceScore Float

  tradingFrequency Json // BehavioralMetrics.tradingFrequency
  tokenPreferences Json // BehavioralMetrics.tokenPreferences
  riskMetrics      Json // BehavioralMetrics.riskMetrics

  reentryRate                Float
  percentageOfUnpairedTokens Float

  sessionCount                  Int
  avgTradesPerSession           Float
  activeTradingPeriods          Json // BehavioralMetrics.activeTradingPeriods
  averageSessionStartHour       Float
  averageSessionDurationMinutes Float

  firstTransactionTimestamp Int?
  lastTransactionTimestamp  Int?

  updatedAt DateTime @updatedAt

  @@index([walletAddress])
}

// Refined: Tracks metadata for each analysis PROCESS execution
model AnalysisRun {
  id             Int      @id @default(autoincrement())
  walletAddress  String
  serviceInvoked String // e.g., 'PnlAnalysisService', 'BehaviorService', 'FullWalletAnalysis'
  runTimestamp   DateTime @default(now())
  status         String // e.g., 'COMPLETED', 'FAILED', 'STARTED'

  inputDataStartTs     Int?
  inputDataEndTs       Int?
  signaturesConsidered Int?

  durationMs   Int?
  errorMessage String?
  notes        String?

  // wallet               Wallet    @relation(fields: [walletAddress], references: [address]) // If linking back to Wallet
  @@index([walletAddress, runTimestamp])
  @@index([serviceInvoked])
  @@index([status])
}

model User {
  id          String    @id @default(cuid())
  apiKey      String    @unique // For API authentication
  description String? // e.g., "Dashboard Primary Access", "Analyst X"
  isDemo      Boolean   @default(false) // New field for demo users
  createdAt   DateTime  @default(now())
  lastSeenAt  DateTime?
  isActive    Boolean   @default(true)

  // New JWT authentication fields
  email         String?   @unique // Email for JWT authentication
  passwordHash  String? // Bcrypt hashed password
  emailVerified Boolean   @default(false)
  lastLoginAt   DateTime? // Track last login for JWT sessions

  // Relations
  activityLogs        ActivityLog[]
  favoriteWallets     UserFavoriteWallet[] // Added for User-FavoriteWallets relationship
  walletNotes         WalletNote[]
  verificationTokens  EmailVerificationToken[] // Email verification tokens
  apiKeys             ApiKey[] // API keys for this user
  passwordResetTokens PasswordResetToken[] // Password reset tokens for this user
}

model EmailVerificationToken {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token])
  @@index([userId])
  @@index([expiresAt])
}

/// Scoped API keys for users (prefix + hashed secret + scopes JSON)
model ApiKey {
  id          String    @id @default(cuid())
  prefix      String
  keyHash     String
  userId      String
  description String?
  scopes      String? // JSON array stored as string
  isActive    Boolean   @default(true)
  lastUsedAt  DateTime?
  expiresAt   DateTime?
  createdAt   DateTime  @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([prefix])
  @@index([expiresAt])
}

/// Password reset tokens (store hashed token in `token`)
model PasswordResetToken {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  used      Boolean  @default(false)
  expiresAt DateTime
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([expiresAt])
}

// Email change feature removed

model ActivityLog {
  id                String   @id @default(cuid()) // Or use autoincrement Int
  userId            String?
  user              User?    @relation(fields: [userId], references: [id])
  actionType        String // e.g., 'get_wallet_summary', 'get_token_performance', 'run_pnl_analysis'
  timestamp         DateTime @default(now())
  requestParameters String? // Input parameters for the action (stored as JSON string)
  status            String // 'SUCCESS', 'FAILURE', 'INITIATED'
  durationMs        Int? // Duration of the action
  errorMessage      String?
  sourceIp          String? // Optional: for additional context

  walletAddress String? // Optional: Link to a specific wallet
  wallet        Wallet? @relation("WalletActivityLogs", fields: [walletAddress], references: [address]) // Named relation

  @@index([userId])
  @@index([actionType])
  @@index([timestamp])
}

// Example Enum (if you want to use it for preservationType)
// enum PreservationType {
//   STABLECOIN
//   HODL
// }

// New model for storing mapping statistics
model MappingActivityLog {
  id            String   @id @default(cuid())
  walletAddress String
  timestamp     DateTime @default(now())

  totalTransactionsReceived          Int
  transactionsSkippedError           Int
  transactionsSuccessfullyProcessed  Int
  analysisInputsGenerated            Int
  nativeSolTransfersProcessed        Int
  tokenTransfersProcessed            Int
  wsolTransfersProcessed             Int
  usdcTransfersProcessed             Int
  otherTokenTransfersProcessed       Int
  feePayerHeuristicApplied           Int
  feesCalculated                     Int
  eventMatcherAttempts               Int
  eventMatcherPrimaryMintsIdentified Int
  eventMatcherConsistentSolFound     Int
  eventMatcherConsistentUsdcFound    Int
  eventMatcherAmbiguous              Int
  eventMatcherNoConsistentValue      Int
  splToSplSwapDetections             Int
  associatedValueFromSplToSpl        Int
  associatedValueFromEventMatcher    Int
  associatedValueFromTotalMovement   Int
  associatedValueFromNetChange       Int
  smallOutgoingHeuristicApplied      Int
  skippedDuplicateRecordKey          Int
  countByInteractionType             Json // Stores the { [type: string]: number } object
  unknownTxSkippedNoJito             Int  @default(0) // Number of UNKNOWN txs skipped for not interacting with Jito

  @@index([walletAddress])
  @@index([timestamp])
}

model WalletNote {
  id            String   @id @default(cuid())
  content       String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  walletAddress String
  wallet        Wallet   @relation(fields: [walletAddress], references: [address])
  userId        String
  user          User     @relation(fields: [userId], references: [id])

  @@index([walletAddress])
  @@index([userId])
  @@index([createdAt])
}

// Enhanced model for User Favorite Wallets with simple tagging
model UserFavoriteWallet {
  userId        String
  walletAddress String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  wallet        Wallet   @relation(fields: [walletAddress], references: [address], onDelete: Cascade)
  createdAt     DateTime @default(now())

  // Simple organization fields
  nickname     String? // User-defined nickname/title for the wallet
  tags         String? // JSON array: ["DeFi", "High Performer", "Research"]
  collections  String? // JSON array: ["Main Portfolio", "Watchlist"]
  metadata     Json? // Future flexibility for any custom data
  lastViewedAt DateTime? // Track when user last viewed this wallet

  @@id([userId, walletAddress])
  @@index([userId])
  @@index([walletAddress])
  @@index([lastViewedAt])
}

model TokenInfo {
  tokenAddress String  @id @unique
  name         String?
  symbol       String?
  imageUrl     String?
  websiteUrl   String?
  twitterUrl   String?
  telegramUrl  String?

  // DexScreener market data for enhanced spam detection
  marketCapUsd         Float? // Market capitalization in USD
  liquidityUsd         Float? // Liquidity in USD
  pairCreatedAt        BigInt? // Unix timestamp when the pair was created
  fdv                  Float? // Fully diluted value
  volume24h            Float? // 24h trading volume
  priceUsd             String? // Current price in USD (string to preserve precision)
  dexscreenerUpdatedAt DateTime? // When DexScreener data was last fetched

  fetchedAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([name])
  @@index([symbol])
  @@index([marketCapUsd])
  @@index([liquidityUsd])
  @@index([pairCreatedAt])
}
