generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Wallet {
  address                      String                 @id @unique
  firstProcessedTimestamp      Int?
  newestProcessedSignature     String?
  newestProcessedTimestamp     Int?
  lastSuccessfulFetchTimestamp DateTime?
  analyzedTimestampStart       Int?
  analyzedTimestampEnd         Int?
  classification               String?                @default("unknown")
  classificationConfidence     Float?
  classificationUpdatedAt      DateTime?
  classificationMethod         String?
  isVerifiedBot                Boolean                @default(false)
  botType                      String?
  botPatternTags               Json?
  activityLogs                 ActivityLog[]          @relation("WalletActivityLogs")
  AnalysisResult               AnalysisResult[]
  favoritedBy                  UserFavoriteWallet[]
  behaviorProfile              WalletBehaviorProfile?
  walletNotes                  WalletNote[]
  pnlSummary                   WalletPnlSummary?

  @@index([classification])
  @@index([classificationConfidence])
  @@index([isVerifiedBot])
}

model HeliusTransactionCache {
  signature String   @id @unique
  timestamp Int
  fetchedAt DateTime @default(now())

  @@index([timestamp])
}

model SwapAnalysisInput {
  id                  Int    @id @default(autoincrement())
  walletAddress       String
  signature           String
  timestamp           Int
  mint                String
  amount              Float
  direction           String
  associatedSolValue  Float
  associatedUsdcValue Float?
  interactionType     String
  feeAmount           Float?
  feePercentage       Float?

  @@unique([signature, mint, direction, amount], name: "signature_mint_direction_amount")
  @@index([walletAddress, timestamp])
  @@index([signature])
  @@index([mint])
}

model AnalysisResult {
  id                      Int       @id @default(autoincrement())
  walletAddress           String
  tokenAddress            String
  totalAmountIn           Float
  totalAmountOut          Float
  netAmountChange         Float
  totalSolSpent           Float
  totalSolReceived        Float
  totalFeesPaidInSol      Float?
  netSolProfitLoss        Float
  transferCountIn         Int
  transferCountOut        Int
  firstTransferTimestamp  Int?
  lastTransferTimestamp   Int?
  isValuePreservation     Boolean?
  estimatedPreservedValue Float?
  preservationType        String?
  currentRawBalance       String?
  currentUiBalance        Float?
  currentUiBalanceString  String?
  balanceDecimals         Int?
  balanceFetchedAt        DateTime?
  updatedAt               DateTime  @default(now()) @updatedAt
  wallet                  Wallet    @relation(fields: [walletAddress], references: [address], onDelete: Cascade)

  @@unique([walletAddress, tokenAddress])
  @@index([walletAddress])
  @@index([tokenAddress])
  @@index([lastTransferTimestamp])
  @@index([netSolProfitLoss])
}

model WalletPnlSummary {
  id                                Int                 @id @default(autoincrement())
  walletAddress                     String              @unique
  totalVolume                       Float
  totalFees                         Float
  realizedPnl                       Float
  unrealizedPnl                     Float
  netPnl                            Float
  stablecoinNetFlow                 Float
  averageSwapSize                   Float
  profitableTokensCount             Int
  unprofitableTokensCount           Int
  totalExecutedSwapsCount           Int
  averageRealizedPnlPerExecutedSwap Float
  realizedPnlToTotalVolumeRatio     Float
  totalSignaturesProcessed          Int
  overallFirstTimestamp             Int?
  overallLastTimestamp              Int?
  updatedAt                         DateTime            @updatedAt
  currentSolBalance                 Float?
  solBalanceFetchedAt               DateTime?
  advancedStats                     AdvancedTradeStats?
  wallet                            Wallet              @relation(fields: [walletAddress], references: [address])

  @@index([walletAddress])
}

model AdvancedTradeStats {
  id                           Int              @id @default(autoincrement())
  walletPnlSummaryId           Int              @unique
  medianPnlPerToken            Float
  trimmedMeanPnlPerToken       Float
  tokenWinRatePercent          Float
  standardDeviationPnl         Float
  profitConsistencyIndex       Float
  weightedEfficiencyScore      Float
  averagePnlPerDayActiveApprox Float
  firstTransactionTimestamp    Int?
  lastTransactionTimestamp     Int?
  updatedAt                    DateTime         @updatedAt
  walletPnlSummary             WalletPnlSummary @relation(fields: [walletPnlSummaryId], references: [id], onDelete: Cascade)
}

model WalletBehaviorProfile {
  id                            Int      @id @default(autoincrement())
  walletAddress                 String   @unique
  buySellRatio                  Float
  buySellSymmetry               Float
  averageFlipDurationHours      Float
  medianHoldTime                Float
  sequenceConsistency           Float
  flipperScore                  Float
  uniqueTokensTraded            Int
  tokensWithBothBuyAndSell      Int
  totalTradeCount               Int
  totalBuyCount                 Int
  totalSellCount                Int
  completePairsCount            Int
  averageTradesPerToken         Float
  tradingTimeDistribution       Json
  percentTradesUnder1Hour       Float
  percentTradesUnder4Hours      Float
  tradingStyle                  String
  confidenceScore               Float
  tradingFrequency              Json
  tokenPreferences              Json
  riskMetrics                   Json
  reentryRate                   Float
  percentageOfUnpairedTokens    Float
  sessionCount                  Int
  avgTradesPerSession           Float
  activeTradingPeriods          Json
  averageSessionStartHour       Float
  averageSessionDurationMinutes Float
  firstTransactionTimestamp     Int?
  lastTransactionTimestamp      Int?
  updatedAt                     DateTime @updatedAt
  wallet                        Wallet   @relation(fields: [walletAddress], references: [address])

  @@index([walletAddress])
}

model AnalysisRun {
  id                   Int      @id @default(autoincrement())
  walletAddress        String
  serviceInvoked       String
  runTimestamp         DateTime @default(now())
  status               String
  inputDataStartTs     Int?
  inputDataEndTs       Int?
  signaturesConsidered Int?
  durationMs           Int?
  errorMessage         String?
  notes                String?

  @@index([walletAddress, runTimestamp])
  @@index([serviceInvoked])
  @@index([status])
}

model User {
  id              String               @id @default(cuid())
  apiKey          String               @unique
  description     String?
  isDemo          Boolean              @default(false)
  createdAt       DateTime             @default(now())
  lastSeenAt      DateTime?
  isActive        Boolean              @default(true)
  activityLogs    ActivityLog[]
  messages        Message[]
  favoriteWallets UserFavoriteWallet[]
  walletNotes     WalletNote[]
}

model ActivityLog {
  id                String   @id @default(cuid())
  userId            String?
  actionType        String
  timestamp         DateTime @default(now())
  requestParameters String?
  status            String
  durationMs        Int?
  errorMessage      String?
  sourceIp          String?
  walletAddress     String?
  wallet            Wallet?  @relation("WalletActivityLogs", fields: [walletAddress], references: [address])
  user              User?    @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([actionType])
  @@index([timestamp])
}

model MappingActivityLog {
  id                                 String   @id @default(cuid())
  walletAddress                      String
  timestamp                          DateTime @default(now())
  totalTransactionsReceived          Int
  transactionsSkippedError           Int
  transactionsSuccessfullyProcessed  Int
  analysisInputsGenerated            Int
  nativeSolTransfersProcessed        Int
  tokenTransfersProcessed            Int
  wsolTransfersProcessed             Int
  usdcTransfersProcessed             Int
  otherTokenTransfersProcessed       Int
  feePayerHeuristicApplied           Int
  feesCalculated                     Int
  eventMatcherAttempts               Int
  eventMatcherPrimaryMintsIdentified Int
  eventMatcherConsistentSolFound     Int
  eventMatcherConsistentUsdcFound    Int
  eventMatcherAmbiguous              Int
  eventMatcherNoConsistentValue      Int
  splToSplSwapDetections             Int
  associatedValueFromSplToSpl        Int
  associatedValueFromEventMatcher    Int
  associatedValueFromTotalMovement   Int
  associatedValueFromNetChange       Int
  smallOutgoingHeuristicApplied      Int
  skippedDuplicateRecordKey          Int
  countByInteractionType             Json
  unknownTxSkippedNoJito             Int      @default(0)

  @@index([walletAddress])
  @@index([timestamp])
}

model WalletNote {
  id            String   @id @default(cuid())
  content       String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  walletAddress String
  userId        String
  user          User     @relation(fields: [userId], references: [id])
  wallet        Wallet   @relation(fields: [walletAddress], references: [address])

  @@index([walletAddress])
  @@index([userId])
  @@index([createdAt])
}

model UserFavoriteWallet {
  userId        String
  walletAddress String
  createdAt     DateTime  @default(now())
  collections   String?
  lastViewedAt  DateTime?
  metadata      Json?
  nickname      String?
  tags          String?
  wallet        Wallet    @relation(fields: [walletAddress], references: [address], onDelete: Cascade)
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, walletAddress])
  @@index([userId])
  @@index([walletAddress])
  @@index([lastViewedAt])
}

model TokenInfo {
  tokenAddress         String         @id @unique
  name                 String?
  symbol               String?
  imageUrl             String?
  websiteUrl           String?
  twitterUrl           String?
  telegramUrl          String?
  marketCapUsd         Float?
  liquidityUsd         Float?
  pairCreatedAt        BigInt?
  fdv                  Float?
  volume24h            Float?
  priceUsd             String?
  dexscreenerUpdatedAt DateTime?
  fetchedAt            DateTime       @default(now())
  updatedAt            DateTime       @updatedAt
  tokenTags            TokenTag[]
  watchedTokens        WatchedToken[]

  @@index([name])
  @@index([symbol])
  @@index([marketCapUsd])
  @@index([liquidityUsd])
  @@index([pairCreatedAt])
}

model Tag {
  id        String     @id @default(cuid())
  name      String     @unique
  type      TagType
  tokenTags TokenTag[]
}

model TokenTag {
  tokenAddress String
  tagId        String
  source       String
  confidence   Float     @default(1.0)
  createdAt    DateTime  @default(now())
  TokenInfo    TokenInfo @relation(fields: [tokenAddress], references: [tokenAddress])
  Tag          Tag       @relation(fields: [tagId], references: [id])

  @@id([tokenAddress, tagId])
  @@index([tagId])
}

model Message {
  id           String            @id @default(cuid())
  body         String
  authorUserId String?
  source       MessageSource
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  deletedAt    DateTime?
  isPinned     Boolean           @default(false)
  parentId     String?
  parent       Message?          @relation("MessageThread", fields: [parentId], references: [id])
  replies      Message[]         @relation("MessageThread")
  author       User?             @relation(fields: [authorUserId], references: [id])
  mentions     MessageMention[]
  revisions    MessageRevision[]
  reactions    MessageReaction[]

  @@index([createdAt, id])
}

model MessageRevision {
  id        String   @id @default(cuid())
  messageId String
  body      String
  editedAt  DateTime @default(now())
  Message   Message  @relation(fields: [messageId], references: [id])
}

model MessageMention {
  id        String             @id @default(cuid())
  messageId String
  kind      MessageMentionKind
  refId     String?
  rawValue  String
  metaJson  Json?
  Message   Message            @relation(fields: [messageId], references: [id])

  @@index([kind, refId])
  @@index([messageId])
}

model MessageReaction {
  messageId String
  type      String
  count     Int       @default(0)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Message   Message   @relation(fields: [messageId], references: [id])

  @@id([messageId, type])
  @@index([type])
}

model WatchedToken {
  id           String           @id @default(cuid())
  tokenAddress String
  list         WatchedTokenList
  createdAt    DateTime         @default(now())
  createdBy    String?
  TokenInfo    TokenInfo        @relation(fields: [tokenAddress], references: [tokenAddress])

  @@unique([tokenAddress, list])
}

enum MessageSource {
  DASHBOARD
  TELEGRAM
  BOT
}

enum MessageMentionKind {
  TOKEN
  TAG
  TIME
  USER
}

enum TagType {
  META
  RISK
  THESIS
}

enum WatchedTokenList {
  FAVORITES
  GRADUATION
  HOLDSTRONG
}
